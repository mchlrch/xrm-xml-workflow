logical-source People {
	type json
	source "stdin" // use stdin if you plan to read from standard inputs, for example with CARML
	// source "input/example.json"
	iterator "$.characters[*]"

	referenceables
		id
		firstname
		lastname
		hair
}

logical-source PeopleXmlExample {
	type xml
	// source "stdin"
	source "input/example.xml"
	iterator "/characters/*"

	// in XML you often have XPath expressions, the need to be put in quotes and prefixed with an alias
	referenceables
		id "@id"
		firstname
		lastname
		hair
}

logical-source PeopleCsvExample {
	type csv
	// source "stdin"
	source "input/example.csv"

	referenceables
		id
		firstname
		lastname
		hair
}

logical-source Example1Json {
	type json
	source "stdin" // use stdin if you plan to read from standard inputs, for example with CARML
	// source "input/example1.json"
	iterator "$.entries[*]"

	referenceables
		foo
		bar
		entityIri
}

logical-source Example2Json {
	type json
	source "stdin" // use stdin if you plan to read from standard inputs, for example with CARML
	// source "input/example2.json"
	iterator "$.entries[*]"

	referenceables
		foo
		bar
		qid
}

logical-source Example3Xml {
	type xml
	source "stdin" // use stdin if you plan to read from standard inputs, for example with CARML
	xml-namespace-extension akomaNtoso
	iterator "/akn:akomaNtoso/akn:act/akn:meta/akn:identification/akn:FRBRWork"

	referenceables
		legalResourceIri "concat('http://zrh.ch', akn:FRBRuri/@value)"
		jurisdiction "tokenize(akn:FRBRuri/@value, '/')[3]"
		doctype "tokenize(akn:FRBRuri/@value, '/')[4]"
		docdate "tokenize(akn:FRBRuri/@value, '/')[5]"
		docnumber "tokenize(akn:FRBRuri/@value, '/')[6]"
		// date_in_force "akn:FRBRdate[@name=\\\"InForce\\\"]/@date"
}

xml-namespace-extension akomaNtoso {
	prefix "akn" "http://docs.oasis-open.org/legaldocml/ns/akn/3.0"
}


logical-source Example4Json {
	type json
	source "stdin"
	iterator "$.professions[*]"

	referenceables
		code
		name
}